import{_ as o,r as i,o as l,c as r,b as s,a,F as c,d as n,e as t}from"./app.cccd94c7.js";const d={},p=s("h1",{id:"deploy-run-with-docker",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#deploy-run-with-docker","aria-hidden":"true"},"#"),n(" Deploy & run with Docker")],-1),u=s("h2",{id:"server-installation",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#server-installation","aria-hidden":"true"},"#"),n(" Server installation")],-1),h=n("We are starting with a fresh "),v={href:"https://releases.ubuntu.com/20.04/",target:"_blank",rel:"noopener noreferrer"},k=n("Ubuntu 20.04.2 LTS (Focal Fossa)"),_=n(" installation on a dedicated server, and we will use "),m={href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"},b=n("Docker"),g=n(" to run our trading bot and the other components."),A=s("p",null,"This is how it works:",-1),E=n("Two images are started manually on the server: "),S=n("A "),R={href:"https://hub.docker.com/_/postgres",target:"_blank",rel:"noopener noreferrer"},f=n("Postgresql image"),y=n(" to store strategies, orders, trades & positions."),T=n("A "),D={href:"https://hub.docker.com/r/prodrigestivill/postgres-backup-local",target:"_blank",rel:"noopener noreferrer"},N=n("Postgresql backup image"),C=n(" to backup Postgresql databases."),O=s("li",null,"Our trading bot is built as a Docker image and deployed to the server by our continuous integration server.",-1),w=t(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>We chose PostgreSQL as our database, but you can choose the one you want, just add the corresponding JDBC driver to your <code>pom.xml</code>.</p></div><h3 id="install-useful-required-tools" tabindex="-1"><a class="header-anchor" href="#install-useful-required-tools" aria-hidden="true">#</a> Install useful &amp; required tools</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> -y <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> gnupg2 pass software-properties-common
<span class="token function">sudo</span> <span class="token function">apt</span> -y upgrade
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="install-docker-docker-compose" tabindex="-1"><a class="header-anchor" href="#install-docker-docker-compose" aria-hidden="true">#</a> Install Docker &amp; docker-compose</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
<span class="token function">sudo</span> add-apt-repository <span class="token string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable&quot;</span>
<span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt-cache</span> policy docker-ce
<span class="token function">sudo</span> <span class="token function">apt</span> -y <span class="token function">install</span> docker-ce <span class="token function">docker-compose</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">666</span> /var/run/docker.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="add-a-user-for-the-trading-bot" tabindex="-1"><a class="header-anchor" href="#add-a-user-for-the-trading-bot" aria-hidden="true">#</a> Add a user for the trading bot</h3><p>Our bot will be deployed to this server from another server (in our case, our continuous integration server), so we need to create a user that can connect with SSH:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">useradd</span> -m -d /home/sma-trading-bot sma-trading-bot
<span class="token function">sudo</span> <span class="token function">passwd</span> sma-trading-bot
<span class="token function">sudo</span> gpasswd -a sma-trading-bot <span class="token function">docker</span>
<span class="token function">sudo</span> <span class="token function">usermod</span> --shell /bin/bash sma-trading-bot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-images-on-the-server" tabindex="-1"><a class="header-anchor" href="#docker-images-on-the-server" aria-hidden="true">#</a> Docker images on the server</h2><p>Download the <a href="/assets/src/docker-compose.yml">docker-compose.yml</a> file on your server, edit your preferences (password, timezone, backup settings...) and run it with the command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">docker-compose</span> up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can download it directly with the command : <code>curl -o docker-compose.yml https://trading-bot.cassandre.tech/assets/src/docker-compose.yml</code></p></div><h3 id="network" tabindex="-1"><a class="header-anchor" href="#network" aria-hidden="true">#</a> Network</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">cassandre</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> cassandre
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This part declares a network named <code>cassandre</code>.</p><h3 id="volumes" tabindex="-1"><a class="header-anchor" href="#volumes" aria-hidden="true">#</a> Volumes</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">cassandre_database</span><span class="token punctuation">:</span>
  <span class="token key atrule">cassandre_database_backup</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This part declares two volumes (space on disk) :</p><ul><li><code>cassandre_database</code> for the database.</li><li><code>cassandre_database_backup</code> for the database backups.</li></ul><h3 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql" aria-hidden="true">#</a> Postgresql</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>  <span class="token key atrule">cassandre-postgresql</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> library/postgres<span class="token punctuation">:</span>13<span class="token punctuation">-</span>alpine
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> cassandre
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> cassandre_database<span class="token punctuation">:</span>/var/lib/postgresql/data
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Europe/Paris
      <span class="token punctuation">-</span> PGTZ=Europe/Paris
      <span class="token punctuation">-</span> POSTGRES_DB=cassandre_trading_bot
      <span class="token punctuation">-</span> POSTGRES_USER=cassandre_trading_bot
      <span class="token punctuation">-</span> POSTGRES_PASSWORD=mypassword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This starts a Postgresql image where our trading bot will store its data (strategies, orders, trades &amp; positions).</p><h3 id="postgresql-backup" tabindex="-1"><a class="header-anchor" href="#postgresql-backup" aria-hidden="true">#</a> Postgresql backup</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>  <span class="token key atrule">cassandre-postgresql-backup</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> prodrigestivill/postgres<span class="token punctuation">-</span>backup<span class="token punctuation">-</span>local<span class="token punctuation">:</span>13<span class="token punctuation">-</span>alpine
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> cassandre<span class="token punctuation">-</span>postgresql
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> cassandre
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> cassandre_database_backup<span class="token punctuation">:</span>/backups
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> TZ=Europe/Paris
      <span class="token punctuation">-</span> POSTGRES_HOST=postgresql
      <span class="token punctuation">-</span> POSTGRES_DB=cassandre_trading_bot
      <span class="token punctuation">-</span> POSTGRES_USER=cassandre_trading_bot
      <span class="token punctuation">-</span> POSTGRES_PASSWORD=mypassword
      <span class="token punctuation">-</span> POSTGRES_EXTRA_OPTS=<span class="token punctuation">-</span><span class="token punctuation">-</span>schema=public
      <span class="token punctuation">-</span> SCHEDULE=@hourly
      <span class="token punctuation">-</span> BACKUP_KEEP_DAYS=7
      <span class="token punctuation">-</span> BACKUP_KEEP_WEEKS=4
      <span class="token punctuation">-</span> BACKUP_KEEP_MONTHS=0
      <span class="token punctuation">-</span> HEALTHCHECK_PORT=8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This starts an image that will connect to the Postgresql image and make backups according to the parameters: <code>SCHEDULE</code>, <code>BACKUP_KEEP_DAYS</code>, <code>BACKUP_KEEP_WEEKS</code> and <code>BACKUP_KEEP_MONTHS</code>.</p><h2 id="your-bot" tabindex="-1"><a class="header-anchor" href="#your-bot" aria-hidden="true">#</a> Your bot</h2><p>There are several ways to do what we are trying to do, we choose this one:</p>`,27),G=n("Our trading bot source code is hosted in a private "),P={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},B=n("Github"),x=n(" project."),I=n("On every push, our "),H={href:"https://github.com/features/actions",target:"_blank",rel:"noopener noreferrer"},q=n("Github actions"),U=n(" script does the following steps: "),$=s("li",null,"Creates the docker image of our trading bot.",-1),K=n("Login to our "),X={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},M=n("docker hub repository"),L=n("."),W=s("li",null,"Push the image to our docker hub repository.",-1),V=s("li",null,"Connect to our private server via ssh.",-1),Y=s("li",null,"Stop the previous running image of our bot and download/run the new image.",-1),F=t(`<p>The source of our script is <a href="/assets/src/deployment.yml">here</a> and this is what it does:</p><h3 id="build-the-docker-image" tabindex="-1"><a class="header-anchor" href="#build-the-docker-image" aria-hidden="true">#</a> Build the docker image</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build with Maven and creates the docker image
  <span class="token key atrule">run</span><span class="token punctuation">:</span> mvn spring<span class="token punctuation">-</span>boot<span class="token punctuation">:</span>build<span class="token punctuation">-</span>image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="push-image-to-our-private-docker-hub" tabindex="-1"><a class="header-anchor" href="#push-image-to-our-private-docker-hub" aria-hidden="true">#</a> Push image to our private docker hub</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Push image to docker hub
  <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
    echo \${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u \${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
    docker push straumat/trading-bot:latest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deploy-to-the-production-server" tabindex="-1"><a class="header-anchor" href="#deploy-to-the-production-server" aria-hidden="true">#</a> Deploy to the production server</h3><p>The CI script does the following:</p><ul><li>Connect to our production server with SSH.</li><li>Login to our docker private account.</li><li>Stop &amp; delete the image of the previous trading bot (if it exists).</li><li>Retrieve the new image from the docker hub.</li><li>Run the image with all the parameters specified in Github secrets.</li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to production server
  <span class="token key atrule">uses</span><span class="token punctuation">:</span> appleboy/ssh<span class="token punctuation">-</span>action@master
  <span class="token key atrule">with</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SSH_HOST <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token key atrule">port</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SSH_PORT <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SSH_USERNAME <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.SSH_PASSWORD <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
      echo \${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u \${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      docker stop $(docker ps -aq --filter &quot;label=trading-bot&quot;)
      docker rm -f $(docker ps -aq --filter &quot;label=trading-bot&quot;)
      docker pull straumat/trading-bot:latest
      docker run  -d \\
                  --security-opt apparmor=unconfined \\
                  --network=&quot;cassandre&quot; \\
                  -e TZ=Europe/Paris \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_DRIVER_CLASS_NAME=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_DRIVER_CLASS_NAME }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_USERNAME=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_USERNAME }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_PASSPHRASE=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_PASSPHRASE }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_KEY=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_KEY }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_SECRET=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_SECRET }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_MODES_SANDBOX=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_MODES_SANDBOX }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_MODES_DRY=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_MODES_DRY }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_RATES_ACCOUNT=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_RATES_ACCOUNT }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_RATES_TICKER=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_RATES_TICKER }}&#39; \\
                  -e CASSANDRE_TRADING_BOT_EXCHANGE_RATES_ORDER=&#39;\${{ secrets.CASSANDRE_TRADING_BOT_EXCHANGE_RATES_ORDER }}&#39; \\
                  -e SPRING_DATASOURCE_DRIVER_CLASS_NAME=\${{ secrets.CASSANDRE_TRADING_BOT_DATABASE_DATASOURCE_DRIVER_CLASS_NAME }} \\
                  -e SPRING_DATASOURCE_URL=\${{ secrets.CASSANDRE_TRADING_BOT_DATABASE_DATASOURCE_URL }} \\
                  -e SPRING_DATASOURCE_USERNAME=\${{ secrets.CASSANDRE_TRADING_BOT_DATABASE_DATASOURCE_USERNAME }} \\
                  -e SPRING_DATASOURCE_PASSWORD=\${{ secrets.CASSANDRE_TRADING_BOT_DATABASE_DATASOURCE_PASSWORD }} \\
                  -l trading-bot \\
                  straumat/trading-bot:latest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These are the parameters for the Postgresql connection:</p><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Value</th></tr></thead><tbody><tr><td style="text-align:left;">DRIVER-CLASS-NAME</td><td style="text-align:left;">org.postgresql.Driver</td></tr><tr><td style="text-align:left;">URL</td><td style="text-align:left;">jdbc:postgresql://cassandre-postgresql/cassandre_trading_bot</td></tr><tr><td style="text-align:left;">USERNAME</td><td style="text-align:left;">cassandre_trading_bot</td></tr><tr><td style="text-align:left;">PASSWORD</td><td style="text-align:left;">mypassword</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>On the server, thanks to the docker label, you can view the bot logs with the command : <code>docker logs $(docker ps -aq --filter &quot;label=trading-bot&quot;) --follow</code></p></div>`,12);function Z(j,z){const e=i("ExternalLinkIcon");return l(),r(c,null,[p,u,s("p",null,[h,s("a",v,[k,a(e)]),_,s("a",m,[b,a(e)]),g]),A,s("ul",null,[s("li",null,[E,s("ul",null,[s("li",null,[S,s("a",R,[f,a(e)]),y]),s("li",null,[T,s("a",D,[N,a(e)]),C])])]),O]),w,s("ul",null,[s("li",null,[G,s("a",P,[B,a(e)]),x]),s("li",null,[I,s("a",H,[q,a(e)]),U,s("ul",null,[$,s("li",null,[K,s("a",X,[M,a(e)]),L]),W,V,Y])])]),F],64)}var Q=o(d,[["render",Z],["__file","docker.html.vue"]]);export{Q as default};
